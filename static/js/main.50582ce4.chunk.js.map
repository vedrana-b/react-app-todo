{"version":3,"sources":["components/tasks.jsx","components/taskList.jsx","components/addTask.jsx","App.js","serviceWorker.js","index.js"],"names":["Task","className","this","props","task","priority","value","Button","onClick","onRemoveTask","id","Component","TaskList","state","onFilterValueChange","filteredValue","setState","filterValues","toLowerCase","includes","FlexboxGrid","Form","fluid","layout","Item","componentClass","Col","colspan","md","FormGroup","ControlLabel","FormControl","type","onChange","List","tasklist","filter","map","index","key","ButtonToolbar","onDelete","appearance","AddTask","errorValue","errorPriority","addTaskHandler","onAdd","generateId","Date","getTime","updateOnEnter","event","keyCode","preventDefault","updateInputValue","updateInputPriority","placeholder","onKeyUp","errorMessage","errorPlacement","xs","color","App","handleAdd","isNaN","push","localStorage","setItem","JSON","stringify","sort","a","b","clearAll","length","removeHandler","taskId","taskIndex","findIndex","splice","getItem","parse","Container","justify","Header","Content","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50582ce4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"rsuite\";\n\nclass Task extends Component {\n  render() {\n    return (\n      <div className=\"task\">\n        <span> {this.props.task.priority}</span>\n        <span>{this.props.task.value}</span>\n\n        <Button onClick={() => this.props.onRemoveTask(this.props.id)}>\n          x\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from \"react\";\nimport {\n  List,\n  Button,\n  Form,\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  ButtonToolbar,\n  FlexboxGrid, Col\n} from \"rsuite\";\nimport Task from \"./tasks\";\n\nclass TaskList extends Component {\n  state = { value: \"\" };\n\n  onFilterValueChange = filteredValue => {\n    return this.setState({\n      value: filteredValue\n    });\n  };\n\n  filterValues = task => {\n    return (\n      task.value.toLowerCase().includes(this.state.value.toLowerCase()) ||\n      task.priority == this.state.value\n    );\n  };\n\n  render() {\n    return (\n      <FlexboxGrid >\n        <Form fluid layout=\"horizontal\" className=\"form\">\n          <FlexboxGrid.Item className=\"form-control\" componentClass={Col} colspan={24} md={24}>\n            <FormGroup className=\"form-group\">\n              <ControlLabel>Filter list</ControlLabel>\n              <FormControl type=\"text\" onChange={this.onFilterValueChange} />\n            </FormGroup>\n          </FlexboxGrid.Item>\n          <FlexboxGrid.Item componentClass={Col} colspan={24} md={24}>\n            <List className=\"printed-list\">\n              {this.props.tasklist\n                .filter(this.filterValues)\n                .map((task, index) => (\n                  <Task\n                    onRemoveTask={this.props.onRemoveTask}\n                    key={index}\n                    id={task.id}\n                    task={task}\n                  />\n                ))}\n            </List>\n          </FlexboxGrid.Item>\n          <FlexboxGrid.Item className=\"form-control\" componentClass={Col} colspan={24} md={24}>\n            <FormGroup className=\"form-group form-group--clear-btn\">\n              <ButtonToolbar>\n                <Button onClick={this.props.onDelete} appearance=\"default\">\n                  Clear All\n              </Button>\n              </ButtonToolbar>\n            </FormGroup>{\" \"}\n          </FlexboxGrid.Item>\n        </Form>\n      </FlexboxGrid>\n    );\n  }\n}\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  ButtonToolbar,\n  Col, FlexboxGrid\n} from \"rsuite\";\n\nclass AddTask extends Component {\n\n  state = {\n    errorValue: false,\n    errorPriority: false,\n  }\n\n  addTaskHandler = () => {\n    let errorValue = !this.state.value;\n    let errorPriority = !this.state.priority;\n\n    this.setState({\n      errorValue,\n      errorPriority\n    });\n\n    if (errorValue || errorPriority) {\n      return;\n    };\n\n    this.props.onAdd({\n      priority: this.state.priority,\n      value: this.state.value,\n      id: this.generateId()\n    });\n  };\n\n  generateId = () => {\n    return new Date().getTime();\n  };\n\n  updateOnEnter = event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      this.addTaskHandler();\n    }\n  }\n\n  updateInputValue = value => {\n    this.setState({\n      value: value\n    });\n  };\n\n  updateInputPriority = priority => {\n    this.setState({ priority: priority });\n  };\n\n  render() {\n    return (\n      <FlexboxGrid>\n        <Form layout=\"horizontal\" className=\"form\">\n          <FlexboxGrid.Item className=\"form-control\" componentClass={Col} colspan={24} md={24}>\n            <FormGroup className=\"form-group\">\n              <ControlLabel>Enter new task</ControlLabel>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Enter task name\"\n                onChange={this.updateInputValue}\n                onKeyUp={this.updateOnEnter}\n                errorMessage={this.state.errorValue ? \"Please enter task name\" : null}\n                errorPlacement={'bottomEnd'}\n              ></FormControl>\n            </FormGroup>\n          </FlexboxGrid.Item>\n          <FlexboxGrid.Item className=\"form-control\" componentClass={Col} colspan={24} md={24} xs={24}>\n            <FormGroup className=\"form-group\">\n              <ControlLabel>Priority</ControlLabel>\n              <FormControl\n                type=\"text\"\n                onChange={this.updateInputPriority}\n                placeholder=\"Enter number\"\n                onKeyUp={this.updateOnEnter}\n                errorMessage={this.state.errorPriority ? \"Please enter task priority\" : null}\n                errorPlacement={'bottomEnd'}\n              />\n            </FormGroup>\n          </FlexboxGrid.Item>\n          <FlexboxGrid.Item className=\"form-control\" componentClass={Col} colspan={24} md={24}>\n            <FormGroup className=\"form-group form--button\">\n              <ButtonToolbar>\n                <Button\n                  id=\"add\"\n                  color=\"green\"\n                  className=\"form-group--add-btn\"\n                  onClick={this.addTaskHandler}\n                >\n                  Add Task\n                  </Button>\n              </ButtonToolbar>\n            </FormGroup>\n          </FlexboxGrid.Item>\n        </Form>\n      </FlexboxGrid>\n    );\n  }\n}\n\nexport default AddTask;\n","import React, { Component } from \"react\";\nimport { Header, Container, FlexboxGrid, Content, Footer, Col } from \"rsuite\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport \"./Css/App.css\";\nimport TaskList from \"./components/taskList\";\nimport AddTask from \"./components/addTask\";\n\nclass App extends Component {\n  state = {\n    tasklist: []\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem(\"tasklist\") == null) {\n      this.setState({ tasklist: [] });\n      return;\n    }\n    let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\n    this.setState({ tasklist });\n  }\n\n  handleAdd = task => {\n    if (isNaN(task.priority)) {\n      return;\n    }\n    let tasklist = this.state.tasklist;\n    tasklist.push(task);\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    tasklist.sort(function (a, b) {\n      return a.priority - b.priority;\n    });\n    this.setState({ tasklist });\n  };\n\n  clearAll = () => {\n    let tasklist = this.state.tasklist;\n    tasklist.length = 0;\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    this.setState({ tasklist });\n  };\n\n  removeHandler = taskId => {\n    let tasklist = this.state.tasklist;\n    let taskIndex = tasklist.findIndex(task => task.id === taskId);\n    tasklist.splice(taskIndex, 1);\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\n    this.setState({ tasklist });\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"task-list\">\n        <Container>\n          <FlexboxGrid justify=\"center\">\n            <FlexboxGrid.Item md={12} componentClass={Col} xs={24} className=\"container\">\n              <Header className=\"header\">\n                <h2> Christmas</h2> <h3>shopping list</h3>\n              </Header>\n              <Content className=\"content\">\n                <AddTask\n                  onAdd={this.handleAdd}\n                  tasklist={this.state.tasklist}\n                />\n\n                <TaskList\n                  tasklist={this.state.tasklist}\n                  onDelete={this.clearAll}\n                  onRemoveTask={this.removeHandler}\n                />\n              </Content>\n              <Footer></Footer>\n            </FlexboxGrid.Item>\n          </FlexboxGrid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}